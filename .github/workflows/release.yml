# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE: me-west1-docker.pkg.dev/koala-ops-demo-373407/koala-repo/flask-app=-
      VERSION_FILE: VERSION
      DEPLOYMENT_FILE: deploy/base/deployment.yaml
      GKE_CLUSTER: koala-demo-cluster
      GKE_ZONE: me-west1-a

    permissions:
      contents: 'write'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v3
    - name: Set current TAG as env variable
      run: echo "TAG=$(cat $VERSION_FILE | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)" >> $GITHUB_ENV
    - name: Echo current TAG
      run: echo "${{ env.TAG }}"
    - name: Change VERSION file with the new TAG
      run: echo $TAG > $VERSION_FILE
    
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

      #####################################
      # Docker build and tag on just created image #
      ####################################
    - name: Docker build and tag image
      run: docker image build -t $IMAGE:latest -t $IMAGE:$TAG .
    
      ################################
      # Docker login                 #
      ################################
    - name: Docker Login to Google Artifacts Repo
      # https://cloud.google.com/artifact-registry/docs/docker/authentication#json-key
      run: echo ${{ secrets.GCLOUD_BASE64 }} | docker login -u _json_key_base64 --password-stdin https://me-west1-docker.pkg.dev

      ################################
      # Push to Google Artifact      #
      ################################
    - name: Push to Google Artifact
      run: docker push $IMAGE:latest; docker push $IMAGE:$TAG

      ##########################################
      # Update git repo with new version       #
      ##########################################
    - name: Update deployment file with new image
      run: |
          git config --global user.name 'Github Actions'
          git config --global user.email 'CI@users.noreply.github.com'
          ./scripts/update-image-tag.sh -f $DEPLOYMENT_FILE -t $TAG
          git add $DEPLOYMENT_FILE
          git add $VERSION_FILE
          git commit -m "Update VERSION and deployments yaml to --> $TAG [skip ci]"
          git push origin main
          git tag $TAG
          git push origin --tags

    - name: Deploy to cluster
      run: |-
        kubectl kustomize deploy/overlays/autopush | kubectl apply -f -
        kubectl get services -o wide